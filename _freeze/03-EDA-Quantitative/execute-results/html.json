{
  "hash": "9c12f19f5b99940d5f054fd361c35f40",
  "result": {
    "markdown": "---\ntitle: \"1.3: Exploring Quantitative Data\"\n#author: 'Adam Spiegler, University of Colorado Denver'\noutput:\n  html_document:\n#    toc: yes\n#    toc_depth: 1\n#    theme: cerulean\n#jupyter:\n#  kernelspec:\n#    display_name: R\n#    language: R\n#    name: ir\n#output:\n#    ipynbdocument::ipynb_document\n---\n\n\nClick [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://githubtocolab.com/CU-Denver-MathStats-OER/Statistical-Theory/blob/main/Chap1/03-EDA-Quantitative.ipynb){target=\"_blank\"} to open an interactive version of the full text section.\n\nFor a shorter [in-class lab version of the section, part 1, click here.](https://githubtocolab.com/CU-Denver-MathStats-OER/Statistical-Theory/blob/main/Labs/03-LabA-EDA-Quantitative.ipynb){target=\"_blank\"}\n\nFor a shorter [in-class lab version of the section, part 2, click here.](https://githubtocolab.com/CU-Denver-MathStats-OER/Statistical-Theory/blob/main/Labs/03-LabB-EDA-Quantitative.ipynb){target=\"_blank\"}\n\n---\n\nAdditional Reading:\n\n- See [Overview of Plotting Data in R](Overview-of-Plots.qmd){target=\"_blank\"} for further reading and examples about plotting in R.\n- See [Fundamentals of Working with Data](Intro-to-Vectors-Dataframes.qmd){target=\"_blank\"} for more information about data types and structures in R.\n- The [R Graph Gallery](https://r-graph-gallery.com/){target=\"_blank\"} has examples of many other types of graphs.\n\n\n# Types of Variables\n\n---\n\nIn statistics, <span style=\"color:dodgerblue\">**variables**</span> are the attributes measured or collected in data. We refer to them as variables since the values or classes of attributes typically vary from observation to observation. The term variable is used differently in statistics from the notion of a variable in algebra. There are two types of variables in statistics:\n\n-   If a variable is measured or counted by a number, it is called a <span style=\"color:dodgerblue\">**quantitative**</span> or <span style=\"color:dodgerblue\">**numerical**</span> variable.\n    -   Quantitative variables may be <span style=\"color:dodgerblue\">**discrete (integers)**</span> or <span style=\"color:dodgerblue\">**continuous (decimals)**</span>.\n-   If a variable groups observations into different categories or rankings, it is a <span style=\"color:dodgerblue\">**qualitative**</span> or <span style=\"color:dodgerblue\">**categorical**</span> variable.\n    -   The different categories of a qualitative variable are called <span style=\"color:dodgerblue\">**levels**</span> or <span style=\"color:dodgerblue\">**classes**</span>.\n\nThe type of statistical analysis we can do depends on whether:\n\n-   We are investigating a single variable, or looking for an association between multiple variables.\n-   The variable(s) are quantitative or categorical.\n-   The data satisfies certain assumptions.\n\nIn our work with [Exploring Categorical Data](02-EDA-Categorical.qmd){target=\"_blank\"}, we performed an initial summary of the categorical variables in the `storms` data set. Today, we will investigate how to numerically and visually summarize quantitative variables.\n\n# Getting to Know Our Data {#sec-storms}\n\n---\n\nThe `dplyr` package contains a data set from the [NOAA Hurricane Best Track Data](https://www.nhc.noaa.gov/data/#hurdat){target=\"_blank\"} that contains data on the following attributes of tracked North Atlantic storms since 1975:\n\n-   Storm name: `name`\n-   Date and time: `year`, `month`, `day`, and `hour`\n-   Storm position: `lat` and `long`\n-   Storm classification: `status`\n-   Category of hurricane: `category` (non-hurricanes are `NA`)\n-   Wind speed (in knots): `wind`\n-   Pressure (in millibars): `pressure`\n-   Tropical storm force diameter (in nautical miles): `tropicalstorm_force_diameter`\n-   Hurricane force diameter (in nautical miles): `hurricane_force_diameter`\n\n::: {.callout-tip}\nSee [Exploring Categorical Data](02-EDA-Categorical.qmd){target=\"_blank\"} for a refresher on our initial exploration with the `storms` data frame.\n:::\n\n## Loading Required Package\n\n---\n\nIn order to access the `storms` data frame in the `dplyr` package, we first load the package with the `library()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)  # load dplyr package\n```\n:::\n\n\n## Help Documentation for `storms` {#sec-03help}\n\n---\n\nThe `?` help operator and `help()` function provide access to the help manuals for R functions, data sets, and other objects. If at any point we want to learn more about data or a function used in this notebook, we can use the help operator. For example, `?typeof`, `?str`, `?hist`, and `?boxplot` will open a help tab with further details about each of function.\n\n-   **Run the code cell below to access the help documentation for the `storms` data set.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?storms  # open help tab\n```\n:::\n\n\n## Question 1\n\n---\n\nList all the quantitative variables in `storms`. Which are being stored as `integer`, and which are stored as `double` (decimals)? \n\n- You can edit, run  and rerun the `typeof()` function in the first code cell below to help identify the data types of individual variables in `storms`.\n- You can use the `str()` function in the second code cell to identify the data types of all variables at once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(storms$year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n### Solution to Question 1\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 2\n\n---\n\nWhat wind speeds are classified as a Category 2 hurricane?\n\n### Solution to Question 2\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 3\n\n---\n\nWhat does the variable `tropicalstorm_force_diameter` measure? What does it mean if a storm observation has a 0 for `tropicalstorm_force_diameter`?\n\n### Solution to Question 3\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 4\n\n---\n\nEnter comments in the code cell below to help describe what each command performs. Then run the `str()` function after running the commands to see the updated data structure of `storms`.\n\n### Solution to Question 4\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# enter your comments after each # \nstorms$year <- as.integer(storms$year)  #\nstorms$month <- as.integer(storms$month)  #\nstorms$hour <- as.integer(storms$hour)  #\nstorms$category <- factor(storms$category)  #\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# view the resulting data structure\nstr(storms)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [19,066 Ã— 13] (S3: tbl_df/tbl/data.frame)\n $ name                        : chr [1:19066] \"Amy\" \"Amy\" \"Amy\" \"Amy\" ...\n $ year                        : int [1:19066] 1975 1975 1975 1975 1975 1975 1975 1975 1975 1975 ...\n $ month                       : int [1:19066] 6 6 6 6 6 6 6 6 6 6 ...\n $ day                         : int [1:19066] 27 27 27 27 28 28 28 28 29 29 ...\n $ hour                        : int [1:19066] 0 6 12 18 0 6 12 18 0 6 ...\n $ lat                         : num [1:19066] 27.5 28.5 29.5 30.5 31.5 32.4 33.3 34 34.4 34 ...\n $ long                        : num [1:19066] -79 -79 -79 -79 -78.8 -78.7 -78 -77 -75.8 -74.8 ...\n $ status                      : Factor w/ 9 levels \"disturbance\",..: 7 7 7 7 7 7 7 7 8 8 ...\n $ category                    : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: NA NA NA NA NA NA NA NA NA NA ...\n $ wind                        : int [1:19066] 25 25 25 25 25 25 25 30 35 40 ...\n $ pressure                    : int [1:19066] 1013 1013 1013 1013 1012 1012 1011 1006 1004 1002 ...\n $ tropicalstorm_force_diameter: int [1:19066] NA NA NA NA NA NA NA NA NA NA ...\n $ hurricane_force_diameter    : int [1:19066] NA NA NA NA NA NA NA NA NA NA ...\n```\n:::\n:::\n\n\n# Summarizing Categorical Data\n\n---\n\nWhen we analyze the categorical variables in `storms`, we use counts and proportions. In the table created by the code cell below, we see how many observations there are in each storm classification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl.status <- table(storms$status) # store counts for each storm classification\ntbl.status  # print table to screen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n           disturbance          extratropical              hurricane \n                   146                   2068                   4684 \n             other low subtropical depression      subtropical storm \n                  1405                    151                    292 \n   tropical depression         tropical storm          tropical wave \n                  3525                   6684                    111 \n```\n:::\n:::\n\n\nThe code cell below gives the proportion of storms in the data are in each storm classification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# table of counts for each storm classification\nprop.table(tbl.status)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n           disturbance          extratropical              hurricane \n           0.007657610            0.108465331            0.245672926 \n             other low subtropical depression      subtropical storm \n           0.073691388            0.007919857            0.015315221 \n   tropical depression         tropical storm          tropical wave \n           0.184884087            0.350571698            0.005821882 \n```\n:::\n:::\n\n\nWe used bar charts and pie charts to visualize the distribution and relations between categorical variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(storms$category,  # categorical data\n     main = \"Hurricanes by Category\",  # main title\n     xlab = \"Hurricane Category\",  # horizontal axis label\n     ylab = \"Frequency\",  # vertical axis label\n     col = \"steelblue\")  # fill color of bars)\n```\n\n::: {.cell-output-display}\n![](03-EDA-Quantitative_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n-   <span style=\"color:tomato\">**For quantitative variables, such as wind speed (`wind`), counting and proportions are not as appropriate or useful.**</span>\n-   <span style=\"color:dodgerblue\">**We get a better understanding of a quantitative variable by describing where the values are centered and the spread of the values.**</span>\n-   Similarly, a good visualization for a quantitative variable will help illustrate where the values are centered, how variable (spread out) the values are, and other useful properties.\n\n# Plotting Quantitative Data\n\n---\n\nAdditional resources for help with plotting data:\n\n-   See [Overview of Plotting Data in R](Overview-of-Plots.qmd){target=\"_blank\"} for further reading and examples about plotting in R.\n-   The [R Graph Gallery](https://r-graph-gallery.com/){target=\"_blank\"} has examples of many other types of graphs.\n\n\n## Histograms\n\n---\n\nA <span style=\"color:dodgerblue\">**histogram**</span> is special bar chart we use to display the distribution of values for a quantitative variable.\n\n-   We first group the values into different ranges of values called <span style=\"color:dodgerblue\">**bins**</span> of equal width.\n    -   This essentially converts the quantitative variable to an ordinal categorical variable with with each bin representing a different level.\n    -   Consider the quantitative variable `wind`. We can use bin ranges such as 0-10 knots, 10-20 knots, ... , 160-170 knots.\n        -   Each bin range should have the same width.\n        -   The bins do not overlap.\n        -   The ordering of the bins is very important.\n-   Then we count how many values in the data are in each bin.\n-   A histogram is a bar chart that represents the number of values that are in each bin range.\n-   Values of the quantitative variable are measured on the horizontal axis.\n-   The height of the bars over each bin range is the number of values (or frequency) in each bin range.\n-   **By default, the counts are right closed.** For example, a wind value of 20 knots would be counted in the bin range 10-20 knots and not counted in the bin range 20-30 knots.\n-   A histogram should not have an spaces between consecutive bars. Empty space means no values are in that bin range.\n-   <span style=\"color:dodgerblue\">**The R function `hist(x, [options])` creates a histogram.**</span>\n-   Run `?hist` for more information about the available options for customizing a histogram, some of which are illustrated in the code cell below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a histogram\nhist(storms$wind,  # vector of values to plot\n     breaks = 15,  # number of bin ranges to use\n     xlab = \"wind speed (in knots)\",   # x-axis label\n     xlim = c(0,200),  # sets window for x-axis\n     ylab = \"Frequency\",  # y-axis label\n     ylim = c(0,5000),  # sets window for y-axis\n     main = \"Distribution of Storm Wind Speed\",  # main label\n     col = \"steelblue\")  # fill color of bars\n```\n\n::: {.cell-output-display}\n![](03-EDA-Quantitative_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## Question 5\n\n---\n\nBased on the histogram above, approximately how many storms have a wind speed less than or equal to 40 knots?\n\n### Solution to Question 5\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 6\n\n---\n\nThe code cell below can help us check our answer.\n\na.  Explain what operation(s) the command in the code cell below. Running the code cell and compare the last 10 entries in the vector `le.40` and the vector `storms$wind` to help determine your answer.\n\nb.  Then run and explain what the second code cell below does. *Hint: R reads the logical `TRUE` as the number 1 and `FALSE` as the number 0.*\n\nc.  How accurate was your previous answer in [Question 5]?\n\n### Solution to Question 6\n\n---\n\na.  Enter comment in first code cell.\n\nb.  Enter comment in second code cell.\n\nc.  How accurate was your answer in [Question 5]?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nle.40 <- storms$wind <= 40  # ??\n\ntail(storms$wind, 10)  # prints last 10 rows of wind speed vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 45 45 45 40 35 35 35 35 40 40\n```\n:::\n\n```{.r .cell-code}\ntail(le.40, 10)  # prints last 10 rows of logical vector le.40\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# enter comment to interpret this command\nsum(le.40)  # ??\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9288\n```\n:::\n:::\n\n\n### Changing the Number of Bins\n\n---\n\nA histogram can illustrate the general shape of the distribution of quantitative variable; however, the number of breaks we use can have a substantial impact.\n\n-   If we include too few bins, we do not get much detail, and we may even get a misleading picture.\n-   If we include too many bins, the histogram may be difficult to read.\n-   The fun of interacting with data in R is we can play around and adjust the number of breaks and other options until we are satisfied.\n\n\n::: {#fig-breaks .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# create a histogram\nhist(storms$wind,  # vector of values to plot\n     breaks = 5,  # number of bin ranges to use\n     xlab = \"wind speed (in knots)\",   # x-axis label\n     xlim = c(0,200),  # sets window for x-axis\n     ylab = \"Frequency\",  # y-axis label\n     ylim = c(0,15000),  # sets window for y-axis\n     main = \"Storm Wind Speed (breaks = 5)\",  # main label\n     cex.lab=1.5, cex.axis=1.5, cex.main=1.5,  # increase font size\n     col = \"steelblue\")  # fill color of bars\n\n# create a histogram\nhist(storms$wind,  # vector of values to plot\n     breaks = 50,  # number of bin ranges to use\n     xlab = \"wind speed (in knots)\",   # x-axis label\n     xlim = c(0,200),  # sets window for x-axis\n     ylab = \"Frequency\",  # y-axis label\n     ylim = c(0,3000),  # sets window for y-axis\n     main = \"Storm Wind Speed (breaks = 50)\",  # main label\n     cex.lab=1.5, cex.axis=1.5, cex.main=1.5,  # increase font size\n     col = \"seagreen\")  # fill color of bars\n```\n\n::: {.cell-output-display}\n![Histogram with 5 Breaks (4 bins)](03-EDA-Quantitative_files/figure-html/fig-breaks-1.png){#fig-breaks-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Histogram with 50 Breaks (49 bins)](03-EDA-Quantitative_files/figure-html/fig-breaks-2.png){#fig-breaks-2 width=672}\n:::\n\nChanging the Breaks: Histograms of Wind Speed\n:::\n\n\n## Question 7\n\n---\n\nHow would you describe the shape of the distribution of wind speed in the histograms above?\n\n### Solution to Question 7\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 8\n\n---\n\nCreate a histogram to display the quantitative variable `month`. What does the shape of that graph tell you about the data?\n\n### Solution to Question 8\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 9\n\n---\n\nCreate a histogram to display the quantitative variable `long`. What does the shape of that graph tell you about the data?\n\n### Solution to Question 9\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n<br>  \n<br>  \n<br>  \n\n\n## The Skewness of Data\n\n---\n\nThe <span style=\"color:dodgerblue\">**skewness**</span> of the data describes the direction of the tail of the data. The tail of the data indicates the direction of outliers (if any).\n\n\n\n\n::: {#fig-shape .cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\n#par(mfrow = c(1, 3))  # Create a 1 x 3 array of plots\n\nhist(storms$wind, \n     xlab = \"wind speed (in knots)\",   # x-axis label\n     ylab = \"Frequency\",  # y-axis label\n     main = \"Distribution of Wind Speeds\",  # main title\n     cex.lab=1.7, cex.axis=1.7, cex.main=1.7,  # increase font size\n     col = \"steelblue\")  # fill color of bars\n\nhist(storms$month, \n     breaks = 12,  # number of breaks\n     xlab=\"Month\",   # x-axis label\n     ylab = \"Frequency\",  # y-axis label\n     main = \"Distribution of Months\",  # main title\n     cex.lab=1.7, cex.axis=1.7, cex.main=1.7,  # increase font size\n     col = \"coral1\")  # fill color of bars\n\nhist(storms$long, \n     breaks = 15,  # number of breaks\n     xlab=\"Degrees of Longitude\",   # x-axis label\n     ylab = \"Frequency\",  # y-axis label\n     main = \"Distribution of Longitude\",  # main title\n     cex.lab=1.7, cex.axis=1.7, cex.main=1.7,  # increase font size\n     col = \"aquamarine4\")  # fill color of bars\n```\n\n::: {.cell-output-display}\n![Skewed Right](03-EDA-Quantitative_files/figure-html/fig-shape-1.png){#fig-shape-1 width=672}\n:::\n\n::: {.cell-output-display}\n![Skewed Left](03-EDA-Quantitative_files/figure-html/fig-shape-2.png){#fig-shape-2 width=672}\n:::\n\n::: {.cell-output-display}\n![Approximately Symmetric](03-EDA-Quantitative_files/figure-html/fig-shape-3.png){#fig-shape-3 width=672}\n:::\n\nComparing the Shapes of Distributions\n:::\n\n\n-   The distribution of wind speeds is <span style=\"color:dodgerblue\">**skewed right**</span>.\n-   The distribution of months is <span style=\"color:dodgerblue\">**skewed left**</span>.\n-   The distribution of longitude is approximately <span style=\"color:dodgerblue\">**symmetric**</span>.\n\n# Measurements of Center\n\n---\n\nTypical measurements of center are:\n\n-   The <span style=\"color:dodgerblue\">**mean**</span> is the average value.\n\n$${\\large \\bar{x} = \\frac{\\mbox{sum of all values}}{\\mbox{total number of values}} =  \\sum_{i=1}^{n} \\frac{x_n}{n}}. $$ \n\n- We use $\\color{dodgerblue}{\\mathbf{\\bar{x}}}$ (pronounced x-bar) to denote a <span style=\"color:dodgerblue\">**sample**</span> mean. \n  - We use $\\color{mediumseagreen}{\\mathbf{\\mu}}$ (Greek letter mu) to denote a <span style=\"color:mediumseagreen\">**population**</span> mean.\n  - In R, we use the function `mean()`. \n  \n- The <span style=\"color:dodgerblue\">**median**</span> is the $50^{\\mbox{th}}$ percentile. This means 50% of the values in the data set are less than the median. \n  - In R, we use the function `median()`. \n  - If there are an odd number of values, the median is the middle value. \n  - If there are an even number of values, the median is the midpoint between the two middle values.\n\n## Question 10\n\n---\n\nCompute the mean and median wind speed of the `storms` data. Interpret each value in practical terms. Be sure to include the units in your interpretation.\n\n::: {.callout-tip}\nWe can input the vector of wind speeds with the code `storms$wind`.\n:::\n\n### Solution to Question 10\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 11\n\n---\n\nWhy do you think the mean wind speed is greater than the median wind speed?\n\n### Solution to Question 11\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Relation of Shape to Measurements of Center\n\n---\n\n![Image Credit: Adam Spiegler, [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0).](https://raw.githubusercontent.com/CU-Denver-MathStats-OER/Statistical-Theory/main/Images/03fig-skewness.png){fig-alt=\"Relation of Skewness to Mean and Median.\"}\n\n-   The mean is more sensitive to outliers than the median. The mean is pulled in the direction of the tail.\n-   If the shape of the histogram is <span style=\"color:dodgerblue\">**symmetric**</span>, then the <span style=\"color:dodgerblue\">**mean is equal to the median**</span>.\n-   If the shape of a histogram is <span style=\"color:tomato\">**skewed to the left**</span>, the <span style=\"color:tomato\">**mean is less than the median**</span>.\n-   If the shape of a histogram is <span style=\"color:mediumseagreen\">**skewed to the right**</span>, the <span style=\"color:mediumseagreen\">**mean is greater than the median**</span>.\n\n# Measurements of Spread\n\n---\n\nTypical measurements of spread are:\n\n-   The <span style=\"color:dodgerblue\">**range**</span> $= \\mbox{max} - \\mbox{min}$.\n    - The advantage of the range is that it is easy to compute.\n    - However, the range ignores all values in the data other than the maximum and minimum values.\n-   The <span style=\"color:dodgerblue\">**standard deviation**</span> approximately measures the average distance of all values from the mean value.\n    -   For a sample, $\\displaystyle s = \\sqrt{\\dfrac{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}{n-1}}$.\n    -   The standard deviation takes all values into account and thus involves many calculations. We typically use technology to help!\n    -   The command `sd(var_name)` computes the sample standard deviation in R.\n    -   We use $\\color{dodgerblue}{\\mathbf{s}}$ to denote a <span style=\"color:dodgerblue\">**sample**</span> standard deviation.\n    -   We use $\\color{tomato}{\\mathbf{\\sigma}}$ (Greek letter sigma) to denote a <span style=\"color:tomato\">**population**</span> standard deviation.\n\n![Image Credit: Adam Spiegler, [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0).](https://raw.githubusercontent.com/CU-Denver-MathStats-OER/Statistical-Theory/main/Images/03fig-stdev.png){fig-alt=\"Figure Illustrating Standard Deviation\"}\n\n## Question 12\n\n---\n\nWhich of the histograms (i)-(vi) has the largest range? The smallest range?\n\n### Solution to Question 12\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n## Question 13\n\n---\n\nWhich of the histograms (i)-(vi) has the largest standard deviation? The smallest standard deviation?\n\n### Solution to Question 13\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n\n# Quartiles\n\n---\n\n-   The $25^{\\mbox{th}}$ percentile <span style=\"color:dodgerblue\">**first quartile**</span> is denoted $\\color{dodgerblue}{\\mathbf{Q_1}}$. \n  - In R, use the function `quantile(x, probs=0.25)`.\n-   The $75^{\\mbox{th}}$ percentile <span style=\"color:dodgerblue\">**third quartile**</span> is denoted $\\color{dodgerblue}{\\mathbf{Q_3}}$. \n  -   - In R, use the function `quantile(x, probs = 0.75)`.\n-   The <span style=\"color:dodgerblue\">**Interquartile Range (IQR)**</span>$\\color{dodgerblue}{=Q_3-Q_1}$. \n  -   - In R, use the function `IQR(x)`.\n-   The <span style=\"color:dodgerblue\">**five number summary**</span> can also provide a good description of the spread of the values since we know <span style=\"color:dodgerblue\">**25% of the values fall between each consecutive pair of values**</span>. \n$$\\color{dodgerblue}{(\\mbox{min}, Q_1 , \\mbox{median}, Q_3, \\mbox{max} )}$$\n  - In R, use the function `fivenum(x)` to compute the five number summary. \n\n## Question 14\n\n---\n\nGive the five number summary for the wind speed of all observations in the `storms` data set.\n\n### Solution to Question 14\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n<br>  \n<br>  \n\n## Five Number Summaries and Boxplots\n\n---\n\nThe five number summary for wind speeds is $(10, 30, 45, 65, 165)$. Below is a <span style=\"color:dodgerblue\">**boxplot**</span> for this data.\n\n- 25% of the wind speeds are between 10 and 30 knots.\n- 25% of the wind speeds are between 30 and 45 knots.\n- 25% of the wind speeds are between 45 and 65 knots.\n- 25% of the wind speeds are between 65 and 165 knots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(storms$wind,  # data to plot\n        main = \"Wind Speeds of Storms\",  # main title \n        xlab = \"Wind Speed (in knots)\",  # x-axis label\n        xaxt='n',  # turn off default ticks on x-axis\n        horizontal = TRUE)  # align horizontally\naxis(1, at = fivenum(storms$wind))  # add tickmarks at five number summary\n```\n\n::: {.cell-output-display}\n![](03-EDA-Quantitative_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## How to Read and Create Boxplots\n\n---\n\nTo create a boxplot:\n\n-   Find the values of $Q_1$, median, and $Q_3$.\n-   Draw a box with edges at $Q_1$ and $Q_3$ and line inside the box for the median.\n-   Identify the upper and lower fence to classify outliers:\n    -   Upper fence $=Q_3 + 1.5(\\mbox{IQR})$.\n    -   Lower fence $=Q_1 - 1.5(\\mbox{IQR})$.\n-   Extend a line (whisker) from the lower edge of box to the smallest observation greater than the lower fence.\n-   Extend a line (whisker) from the upper edge of the box to the largest value that is less than the upper fence.\n-   The observations that are less than the lower fence or greater than the upper fence are considered <span style=\"color:dodgerblue\">**outliers**</span>.\n     -  Outlier values are marked with individual points.\n\n\n## Question 15\n\n---\n\nCompute the upper and lower fences for the wind speed observations in `storms`.\n\n### Solution to Question 15\n\n---\n\n\n<br>  \n<br>  \n<br>  \n\n\n# The Empirical Cumulative Distribution Function (ecdf)\n\n---\n\nA question we often wish to explore is what proportion of values in our data are less or equal to a specified value $x$? To answer this question, we count the total number of observations in our data that are less than or equal to $x$, and then divide by the total number of observations in our data.\n\n\n## Counting Observations with Logical Statements\n\n---\n\nTo illustrate how we can count observations that satisfy a given condition, consider the a vector of 5 values: $31$, $33$, $34$, $36$, and $38$. We store these values in the vector named `test.data` below. The command `test.data <= 35` applies a logical test to each of the 5 values in the vector:\n\n> Is the value less than or equal to 35?\n\nRun the code cell below and check the output to verify the test works as expected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest.data <- c(31, 33, 34, 36, 38)  # vector of test data\ntest.data <= 35  # logical test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n- The result `TRUE` is counted as 1.\n- The result `FALSE` is counted as 0.\n- We can use the `sum()` function to count how many `TRUE` results we have.\n- Running the code cell below, we verify that 3 values in `test.data` are less than or equal to 35.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(test.data <= 35)  # sum the TRUE results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nWe can convert the count to a proportion by dividing by the total number of values in our data. Our vector `test.data` has a total of 5 observations; therefore, the proportion of values that are less than or equal to 35 is 3 out of 5 or $0.6$. We can use the `mean()` to count the number of `TRUE` results and divide by the total number of all observations in one command to simplify the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(test.data <= 35)  # total values <= 35 divided by total number of values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6\n```\n:::\n:::\n\n\n\n## Question 16\n\n---\n\nWhat proportion of observations in `storms$wind` have a wind speed less than or equal to 50 knots?\n\n### Solution to Question 16\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# what proportion of observations have wind less than or equal to 50\n```\n:::\n\n\n\n## What is the Empirical Cumulative Distribution Function?\n\n---\n\nThe <span style=\"color:dodgerblue\">**empirical cumulative distribution function (ecdf)**</span> is typically denoted by the notation $\\mathbf{\\color{dodgerblue}{\\widehat{F}(x)}}$. We read the notation $\\hat{F}$ as **F hat**, and we will make use of the hat notation throughout the semester.\n\n- The input $x$ is a value.\n- The output $\\widehat{F}(x)$ of the ecdf is the proportion of values in the sample that are less than or equal to $x$.\n\nRecall the vector `test.data` contains the values $31$, $33$, $34$, $36$, and $38$. We can express the ecdf as a piecewise function. \n\n$$\n\\widehat{F}(x) = \\left\\{ \n\\begin{array}{ll}\n0  & x < 31 \\\\\n0.2 &  31 \\leq x < 33 \\\\\n0.4 &  33 \\leq x < 34 \\\\\n0.6 &  34 \\leq x < 36 \\\\\n0.8 &  36 \\leq x < 38 \\\\\n1 & x \\geq 38\n\\end{array} \\right.\n$$\n\n\n## Graphing the Empirical Cumulative Distribution Function \n\n---\n\nWe can plot the ecdf using the `plot.ecdf()` function in R, and the resulting plot is a piecewise, step function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.ecdf(test.data, col=\"steelblue\")\n```\n\n::: {.cell-output-display}\n![](03-EDA-Quantitative_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n## Question 17\n\n---\n\nComplete the statements below to identify some key properties of ecdf's.\n\n### Solution to Question 17\n\n---\n\n\n- The minimum output value of an ecdf is ??.\n- The maximum value output value of an ecdf is ??.\n- The ecdf is a ?? function since as $x$ increases, $\\widehat{F}(x)$ cannot decrease.\n\n\n## Question 18\n\n---\n\nPlot the empirical cumulative distribution function for the wind speeds in the `storms` data set and check your answer to [Question 16].\n\n### Solution to Question 18\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the ecdf for wind speeds in storms\n```\n:::\n\n\n\n\n# Comparing Quantitative and Categorical Data\n\n---\n\nWe have explored some of the categorical variables in the `storms` data set in our work with [Exploring Categorical Data](02-EDA-Categorical.qmd){target=\"_blank\"}. We have discussed how we can summarize and plot a quantitative variable. Often in statistics we would like to compare the distribution of a quantitative variable for different classes of a categorical variable. For example, we may be interested in investigating the following:\n\n> In which month do storms have the greatest wind speed?\n\nWe first check the data type of the month variable in `storms` using the `typeof()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(storms$month)  # check how months is stored\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n## Converting a Quantitative Variable to a Categorical Variable with `factor()`\n\n---\n\nMonths were initially stored as decimals. We converted `month` to an integer earlier, and we can see `month` is still stored as an integer. Let's convert `month` to a `factor` so R will treat each month as a separate class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstorms$month <- factor(storms$month)  # convert month to a categorical variable\nsummary(storms$month)  # check summary output after converting to factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   1    4    5    6    7    8    9   10   11   12 \n  70   66  201  779 1603 4440 7509 3077 1109  212 \n```\n:::\n:::\n\n\n\n## Side by Side Boxplots with `plot()`\n\n---\n\nThe `plot()` function creates different types of plots depending on the data type and number of variables we enter.\n\n- If `x` is quantitative, `plot(x)` creates an index plot which is generally not too useful.\n- If `x` is categorical, `plot(x)` creates a bar chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))  # create a 1 by 2 array of plots\nplot(storms$month)  # bar chart is created for categorical data\nplot(storms$wind)  # index plot is created for quantitative data\n```\n\n::: {.cell-output-display}\n![](03-EDA-Quantitative_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n- If `x` is categorical and `y` is quantitative, `plot(y ~ x, data = [name])` creates side by side boxplots, one for each class of `x`.\n- If both `x` and `y` are quantitative variables, `plot(y ~ x, data = [name])` creates a scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,2))  # create a 1 by 2 array of plots\nplot(wind ~ month, data = storms)  # side by side boxplots\nplot(wind ~ pressure, data = storms)  # scatterplot\n```\n\n::: {.cell-output-display}\n![](03-EDA-Quantitative_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nThe side by side boxplots created above are hard to read since we have 12 boxplots in total. The two months with the most storms data are August and September. \n\n> How can we compare storms only in August and September?\n\n\n## Subsetting and Filtering Data\n\n---\n\nWe can compare data for only August and September using various methods. One common method is to subset all of the data in `storms` into two separate data frames, one for each month. Below are three different ways we can subset data:\n\n- Using the [`subset()`](#sec-subset) function in base R.\n- Using the [`filter()`](#sec-filter) function in the `dplyr` package.\n- Using [logical statements](#sec-logic).\n\nOther methods exist as well.\n\n\n### The `subset()` Function in Base R {#sec-subset}\n\n---\n\nAs the name implies, the `subset()` function in base R is a really useful function for subsetting! We can open the help documentation with `?subset` to learn how to apply this function. Below are some examples of different ways we may want to subset the `storms` data to analyze for storms that occurred in August.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keeps all variables for storms in August\naug <- subset(storms, month == \"8\")\n\n# keeps only the wind speed variable for August storms\naug.wind <- subset(storms, select = wind, month == \"8\")\n\n# drop = T drops the column name and creates a vector instead of a data frame\naug.wind.vec <- subset(storms, select = wind, month == \"8\", drop = T) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can see all variables are selected\nhead(aug)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 13\n  name   year month   day  hour   lat  long status categâ€¦Â¹  wind pressâ€¦Â² tropiâ€¦Â³\n  <chr> <int> <fct> <int> <int> <dbl> <dbl> <fct>  <fct>   <int>   <int>   <int>\n1 Caroâ€¦  1975 8        24    12  22.4 -69.8 tropiâ€¦ <NA>       25    1011      NA\n2 Caroâ€¦  1975 8        24    18  21.9 -71.1 tropiâ€¦ <NA>       25    1011      NA\n3 Caroâ€¦  1975 8        25     0  21.6 -72.5 tropiâ€¦ <NA>       25    1010      NA\n4 Caroâ€¦  1975 8        25     6  21.2 -73.8 tropiâ€¦ <NA>       25    1010      NA\n5 Caroâ€¦  1975 8        25    12  20.9 -75.1 tropiâ€¦ <NA>       25    1011      NA\n6 Caroâ€¦  1975 8        25    18  20.6 -76.4 tropiâ€¦ <NA>       25    1011      NA\n# â€¦ with 1 more variable: hurricane_force_diameter <int>, and abbreviated\n#   variable names Â¹â€‹category, Â²â€‹pressure, Â³â€‹tropicalstorm_force_diameter\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# just the wind variable is selected\nhead(aug.wind)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 1\n   wind\n  <int>\n1    25\n2    25\n3    25\n4    25\n5    25\n6    25\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# wind speeds in august stored in a vector\nhead(aug.wind.vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25 25 25 25 25 25\n```\n:::\n:::\n\n\n\n## Question 19\n\n---\n\nCompute the mean and median wind speed of storms in August. Compare the values of the mean and median. What does this tell us about the shape of the data?\n\n### Solution to Question 19\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n<br>  \n<br>  \n<br>  \n\n\n### The `filter()` Function in `dplyr` {#sec-filter}\n\n---\n\nUsing the `filter` function in `dplyr` package, we can filter out just the August observations. \n\n- Note you need to load the `dplyr` package with a `library()` in order to use `filter()`.\n- We have already loaded `dplyr` since that is where the `storms` data is found.\n- The command below gives the same result as `subset(storms, month == \"8\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naug2 <- filter(storms, month == \"8\")  # filter requires dplyr package\nhead(aug2)  # selects all variables\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 13\n  name   year month   day  hour   lat  long status categâ€¦Â¹  wind pressâ€¦Â² tropiâ€¦Â³\n  <chr> <int> <fct> <int> <int> <dbl> <dbl> <fct>  <fct>   <int>   <int>   <int>\n1 Caroâ€¦  1975 8        24    12  22.4 -69.8 tropiâ€¦ <NA>       25    1011      NA\n2 Caroâ€¦  1975 8        24    18  21.9 -71.1 tropiâ€¦ <NA>       25    1011      NA\n3 Caroâ€¦  1975 8        25     0  21.6 -72.5 tropiâ€¦ <NA>       25    1010      NA\n4 Caroâ€¦  1975 8        25     6  21.2 -73.8 tropiâ€¦ <NA>       25    1010      NA\n5 Caroâ€¦  1975 8        25    12  20.9 -75.1 tropiâ€¦ <NA>       25    1011      NA\n6 Caroâ€¦  1975 8        25    18  20.6 -76.4 tropiâ€¦ <NA>       25    1011      NA\n# â€¦ with 1 more variable: hurricane_force_diameter <int>, and abbreviated\n#   variable names Â¹â€‹category, Â²â€‹pressure, Â³â€‹tropicalstorm_force_diameter\n```\n:::\n:::\n\n\n### Using Logical Statements {#sec-logic}\n\n---\n\nWhen writing more complex code such as for loops, it is often useful to subset data using logical statements. For example, `storms[storms$month == \"8\", ]` extracts just the rows that have a `month` value equal to 8.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract rows from storms with month equal to 8\naug.logic <- storms[storms$month == \"8\", ]\nhead(aug.logic)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 13\n  name   year month   day  hour   lat  long status categâ€¦Â¹  wind pressâ€¦Â² tropiâ€¦Â³\n  <chr> <int> <fct> <int> <int> <dbl> <dbl> <fct>  <fct>   <int>   <int>   <int>\n1 Caroâ€¦  1975 8        24    12  22.4 -69.8 tropiâ€¦ <NA>       25    1011      NA\n2 Caroâ€¦  1975 8        24    18  21.9 -71.1 tropiâ€¦ <NA>       25    1011      NA\n3 Caroâ€¦  1975 8        25     0  21.6 -72.5 tropiâ€¦ <NA>       25    1010      NA\n4 Caroâ€¦  1975 8        25     6  21.2 -73.8 tropiâ€¦ <NA>       25    1010      NA\n5 Caroâ€¦  1975 8        25    12  20.9 -75.1 tropiâ€¦ <NA>       25    1011      NA\n6 Caroâ€¦  1975 8        25    18  20.6 -76.4 tropiâ€¦ <NA>       25    1011      NA\n# â€¦ with 1 more variable: hurricane_force_diameter <int>, and abbreviated\n#   variable names Â¹â€‹category, Â²â€‹pressure, Â³â€‹tropicalstorm_force_diameter\n```\n:::\n:::\n\n\n\n## Question 20\n\n---\n\nUsing one of the methods above, create a data frame name `sept` that contains all variables for only the observations that occurred in September.\n\n\n### Solution to Question 20\n\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keeps all variables for storms in September\n```\n:::\n\n\n\n## Creating Side by Side Boxplots with `boxplot`\n\n---\n\nOnce we have created the data frames `aug` and `sept`, we can create side by side boxplots to compare the wind speeds for storms in these two months.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# need to answer previous question first\nboxplot(aug$wind, sept$wind,  # enter two vectors of data\n        main = \"Comparing Wind Speeds in Aug. and Sept.\",   # main title\n        xlab = \"Wind Speed (in knots)\",  # x-axis label\n        horizontal = TRUE,  # align boxplots horizontally\n        names = c(\"August\", \"September\"),  # label each boxplot\n        col = c(\"seagreen\", \"steelblue\"))  # fill color for box\n```\n:::\n\n\n\n\n## Question 21\n\n---\n\nIn which month (August or September) are the wind speeds of storms more severe? What statistics did you use to draw your conclusion?\n\n### Solution to Question 21\n\n---\n\n<br>  \n<br>  \n<br>  \n\n\n\n## Question 22\n\n---\n\nCreate side by side boxplots to compare the distribution of wind speeds in July, August and September.\n\n### Solution to Question 22\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n<br>  \n<br>  \n\n\n\n# Appendix: Assignment of Objects\n\n---\n\nTo store a data structure in the computer's memory we must assign it a name.\n\nData structures can be stored using the assignment operator `<-` or `=`.\n\nSome comments:\n\n-   In general, both `<-` and `=` *can* be used for assignment.\n-   `<-` and `=` can be used identically most of the time, but not always.\n-   It's safer and more conventional to use `<-` for assignment.\n-   **Pressing the \"Alt\" and \"-\" keys simultaneously on a PC** or Linux machine **(Option and - on a Mac)** will **insert `<-` into the R** console and script files.\n\n## Why Can't I See the Output?\n\n---\n\nIn the following code, we compute the mean of a vector. **Why can't we see the result after running it**?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- storms$wind  # wind is now stored in w\nxbar.w <- mean(w)  # compute mean wind speed and assign to xbar.w\n```\n:::\n\n\nIn the code cell above, the output has been stored in an object that we can refer to later.\n\n## Printing Output to Screen\n\n---\n\nOnce an object has been assigned a name, it can be printed by executing the name of the object or using the `print` function or just entering the object name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxbar.w  # print the mean wind speed to screen\nprint(xbar.w)  # print a different way\n```\n:::\n\n\n## Assigning and Printing An Object At Once\n\n---\n\nAnother nice way to both execute, store, and print the output of a command is the parentheses `( )` method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(sd.w <- sd(w))  # using ( ) around a command will execute, store and print output\n```\n:::\n\n\n### Sometimes you want to see the result of a code cell, and sometimes you will not.\n\n\n\n---\n\n![Creative Commons License](https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png) <nbsp>\n\n*Statistical Methods: Exploring the Uncertain* by [Adam Spiegler](https://github.com/CU-Denver-MathStats-OER/Statistical-Theory) is licensed under a [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License](http://creativecommons.org/licenses/by-nc-sa/4.0/).\n\n\n",
    "supporting": [
      "03-EDA-Quantitative_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}